// Autogenerated AST node
package org.kamalyes.jython3.antlr.ast;

import org.antlr.runtime.Token;
import org.kamalyes.jython3.antlr.PythonTree;
import org.kamalyes.jython3.antlr.adapter.AstAdapters;
import org.kamalyes.jython3.antlr.base.expr;
import org.kamalyes.jython3.antlr.base.slice;
import org.kamalyes.jython3.core.ArgParser;
import org.kamalyes.jython3.core.Py;
import org.kamalyes.jython3.core.PyObject;
import org.kamalyes.jython3.core.PyUnicode;
import org.kamalyes.jython3.core.PyStringMap;
import org.kamalyes.jython3.core.PyType;
import org.kamalyes.jython3.expose.ExposedGet;
import org.kamalyes.jython3.expose.ExposedMethod;
import org.kamalyes.jython3.expose.ExposedNew;
import org.kamalyes.jython3.expose.ExposedSet;
import org.kamalyes.jython3.expose.ExposedType;

@ExposedType(name = "_ast.Index", base = slice.class)
public class Index extends slice {
  public static final PyType TYPE = PyType.fromClass(Index.class);
  private expr value;

  public expr getInternalValue() {
    return value;
  }

  @ExposedGet(name = "value")
  public PyObject getValue() {
    return value;
  }

  @ExposedSet(name = "value")
  public void setValue(PyObject value) {
    this.value = AstAdapters.py2expr(value);
  }

  private final static PyUnicode[] fields = new PyUnicode[] { new PyUnicode("value") };

  @ExposedGet(name = "_fields")
  public PyUnicode[] get_fields() {
    return fields;
  }

  private final static PyUnicode[] attributes = new PyUnicode[0];

  @ExposedGet(name = "_attributes")
  public PyUnicode[] get_attributes() {
    return attributes;
  }

  public Index(PyType subType) {
    super(subType);
  }

  public Index() {
    this(TYPE);
  }

  @ExposedNew
  @ExposedMethod
  public void Index___init__(PyObject[] args, String[] keywords) {
    ArgParser ap = new ArgParser("Index", args, keywords, new String[] { "value" }, 1, true);
    setValue(ap.getPyObject(0, Py.None));
  }

  public Index(PyObject value) {
    setValue(value);
  }

  public Index(Token token, expr value) {
    super(token);
    this.value = value;
    addChild(value);
  }

  public Index(Integer ttype, Token token, expr value) {
    super(ttype, token);
    this.value = value;
    addChild(value);
  }

  public Index(PythonTree tree, expr value) {
    super(tree);
    this.value = value;
    addChild(value);
  }

  @ExposedGet(name = "repr")
  public String toString() {
    return "Index";
  }

  public String toStringTree() {
    StringBuffer sb = new StringBuffer("Index(");
    sb.append("value=");
    sb.append(dumpThis(value));
    sb.append(",");
    sb.append(")");
    return sb.toString();
  }

  public <R> R accept(VisitorIF<R> visitor) throws Exception {
    return visitor.visitIndex(this);
  }

  public void traverse(VisitorIF<?> visitor) throws Exception {
    if (value != null)
      value.accept(visitor);
  }

  public PyObject __dict__;

  @Override
  public PyObject fastGetDict() {
    ensureDict();
    return __dict__;
  }

  @ExposedGet(name = "__dict__")
  public PyObject getDict() {
    return fastGetDict();
  }

  private void ensureDict() {
    if (__dict__ == null) {
      __dict__ = new PyStringMap();
    }
  }

}
