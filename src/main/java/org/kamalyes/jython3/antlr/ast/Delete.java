// Autogenerated AST node
package org.kamalyes.jython3.antlr.ast;

import org.antlr.runtime.Token;
import org.kamalyes.jython3.antlr.PythonTree;
import org.kamalyes.jython3.antlr.adapter.AstAdapters;
import org.kamalyes.jython3.antlr.base.expr;
import org.kamalyes.jython3.antlr.base.stmt;
import org.kamalyes.jython3.core.ArgParser;
import org.kamalyes.jython3.core.AstList;
import org.kamalyes.jython3.core.Py;
import org.kamalyes.jython3.core.PyObject;
import org.kamalyes.jython3.core.PyUnicode;
import org.kamalyes.jython3.core.PyStringMap;
import org.kamalyes.jython3.core.PyType;
import org.kamalyes.jython3.expose.ExposedGet;
import org.kamalyes.jython3.expose.ExposedMethod;
import org.kamalyes.jython3.expose.ExposedNew;
import org.kamalyes.jython3.expose.ExposedSet;
import org.kamalyes.jython3.expose.ExposedType;

import java.util.ArrayList;

@ExposedType(name = "_ast.Delete", base = stmt.class)
public class Delete extends stmt {
  public static final PyType TYPE = PyType.fromClass(Delete.class);
  private java.util.List<expr> targets;

  public java.util.List<expr> getInternalTargets() {
    return targets;
  }

  @ExposedGet(name = "targets")
  public PyObject getTargets() {
    return new AstList(targets, AstAdapters.exprAdapter);
  }

  @ExposedSet(name = "targets")
  public void setTargets(PyObject targets) {
    this.targets = AstAdapters.py2exprList(targets);
  }

  private final static PyUnicode[] fields = new PyUnicode[] { new PyUnicode("targets") };

  @ExposedGet(name = "_fields")
  public PyUnicode[] get_fields() {
    return fields;
  }

  private final static PyUnicode[] attributes = new PyUnicode[] { new PyUnicode("lineno"),
      new PyUnicode("col_offset") };

  @ExposedGet(name = "_attributes")
  public PyUnicode[] get_attributes() {
    return attributes;
  }

  public Delete(PyType subType) {
    super(subType);
  }

  public Delete() {
    this(TYPE);
  }

  @ExposedNew
  @ExposedMethod
  public void Delete___init__(PyObject[] args, String[] keywords) {
    ArgParser ap = new ArgParser("Delete", args, keywords, new String[] { "targets", "lineno", "col_offset" }, 1, true);
    setTargets(ap.getPyObject(0, Py.None));
    int lin = ap.getInt(1, -1);
    if (lin != -1) {
      setLineno(lin);
    }

    int col = ap.getInt(2, -1);
    if (col != -1) {
      setLineno(col);
    }

  }

  public Delete(PyObject targets) {
    setTargets(targets);
  }

  public Delete(Token token, java.util.List<expr> targets) {
    super(token);
    this.targets = targets;
    if (targets == null) {
      this.targets = new ArrayList<expr>();
    }
    for (PythonTree t : this.targets) {
      addChild(t);
    }
  }

  public Delete(Integer ttype, Token token, java.util.List<expr> targets) {
    super(ttype, token);
    this.targets = targets;
    if (targets == null) {
      this.targets = new ArrayList<expr>();
    }
    for (PythonTree t : this.targets) {
      addChild(t);
    }
  }

  public Delete(PythonTree tree, java.util.List<expr> targets) {
    super(tree);
    this.targets = targets;
    if (targets == null) {
      this.targets = new ArrayList<expr>();
    }
    for (PythonTree t : this.targets) {
      addChild(t);
    }
  }

  @ExposedGet(name = "repr")
  public String toString() {
    return "Delete";
  }

  public String toStringTree() {
    StringBuffer sb = new StringBuffer("Delete(");
    sb.append("targets=");
    sb.append(dumpThis(targets));
    sb.append(",");
    sb.append(")");
    return sb.toString();
  }

  public <R> R accept(VisitorIF<R> visitor) throws Exception {
    return visitor.visitDelete(this);
  }

  public void traverse(VisitorIF<?> visitor) throws Exception {
    if (targets != null) {
      for (PythonTree t : targets) {
        if (t != null)
          t.accept(visitor);
      }
    }
  }

  public PyObject __dict__;

  @Override
  public PyObject fastGetDict() {
    ensureDict();
    return __dict__;
  }

  @ExposedGet(name = "__dict__")
  public PyObject getDict() {
    return fastGetDict();
  }

  private void ensureDict() {
    if (__dict__ == null) {
      __dict__ = new PyStringMap();
    }
  }

  private int lineno = -1;

  @ExposedGet(name = "lineno")
  public int getLineno() {
    if (lineno != -1) {
      return lineno;
    }
    return getLine();
  }

  @ExposedSet(name = "lineno")
  public void setLineno(int num) {
    lineno = num;
  }

  private int col_offset = -1;

  @ExposedGet(name = "col_offset")
  public int getCol_offset() {
    if (col_offset != -1) {
      return col_offset;
    }
    return getCharPositionInLine();
  }

  @ExposedSet(name = "col_offset")
  public void setCol_offset(int num) {
    col_offset = num;
  }

}
