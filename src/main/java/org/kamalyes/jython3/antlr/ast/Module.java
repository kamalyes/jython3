// Autogenerated AST node
package org.kamalyes.jython3.antlr.ast;

import org.antlr.runtime.Token;
import org.kamalyes.jython3.antlr.PythonTree;
import org.kamalyes.jython3.antlr.adapter.AstAdapters;
import org.kamalyes.jython3.antlr.base.mod;
import org.kamalyes.jython3.antlr.base.stmt;
import org.kamalyes.jython3.core.ArgParser;
import org.kamalyes.jython3.core.AstList;
import org.kamalyes.jython3.core.Py;
import org.kamalyes.jython3.core.PyObject;
import org.kamalyes.jython3.core.PyUnicode;
import org.kamalyes.jython3.core.PyStringMap;
import org.kamalyes.jython3.core.PyType;
import org.kamalyes.jython3.expose.ExposedGet;
import org.kamalyes.jython3.expose.ExposedMethod;
import org.kamalyes.jython3.expose.ExposedNew;
import org.kamalyes.jython3.expose.ExposedSet;
import org.kamalyes.jython3.expose.ExposedType;

import java.util.ArrayList;

@ExposedType(name = "_ast.Module", base = mod.class)
public class Module extends mod {
  public static final PyType TYPE = PyType.fromClass(Module.class);
  private java.util.List<stmt> body;

  public java.util.List<stmt> getInternalBody() {
    return body;
  }

  @ExposedGet(name = "body")
  public PyObject getBody() {
    return new AstList(body, AstAdapters.stmtAdapter);
  }

  @ExposedSet(name = "body")
  public void setBody(PyObject body) {
    this.body = AstAdapters.py2stmtList(body);
  }

  private final static PyUnicode[] fields = new PyUnicode[] { new PyUnicode("body") };

  @ExposedGet(name = "_fields")
  public PyUnicode[] get_fields() {
    return fields;
  }

  private final static PyUnicode[] attributes = new PyUnicode[0];

  @ExposedGet(name = "_attributes")
  public PyUnicode[] get_attributes() {
    return attributes;
  }

  public Module(PyType subType) {
    super(subType);
  }

  public Module() {
    this(TYPE);
  }

  @ExposedNew
  @ExposedMethod
  public void Module___init__(PyObject[] args, String[] keywords) {
    ArgParser ap = new ArgParser("Module", args, keywords, new String[] { "body" }, 1, true);
    setBody(ap.getPyObject(0, Py.None));
  }

  public Module(PyObject body) {
    setBody(body);
  }

  public Module(Token token, java.util.List<stmt> body) {
    super(token);
    this.body = body;
    if (body == null) {
      this.body = new ArrayList<stmt>();
    }
    for (PythonTree t : this.body) {
      addChild(t);
    }
  }

  public Module(Integer ttype, Token token, java.util.List<stmt> body) {
    super(ttype, token);
    this.body = body;
    if (body == null) {
      this.body = new ArrayList<stmt>();
    }
    for (PythonTree t : this.body) {
      addChild(t);
    }
  }

  public Module(PythonTree tree, java.util.List<stmt> body) {
    super(tree);
    this.body = body;
    if (body == null) {
      this.body = new ArrayList<stmt>();
    }
    for (PythonTree t : this.body) {
      addChild(t);
    }
  }

  @ExposedGet(name = "repr")
  public String toString() {
    return "Module";
  }

  public String toStringTree() {
    StringBuffer sb = new StringBuffer("Module(");
    sb.append("body=");
    sb.append(dumpThis(body));
    sb.append(",");
    sb.append(")");
    return sb.toString();
  }

  public <R> R accept(VisitorIF<R> visitor) throws Exception {
    return visitor.visitModule(this);
  }

  public void traverse(VisitorIF<?> visitor) throws Exception {
    if (body != null) {
      for (PythonTree t : body) {
        if (t != null)
          t.accept(visitor);
      }
    }
  }

  public PyObject __dict__;

  @Override
  public PyObject fastGetDict() {
    ensureDict();
    return __dict__;
  }

  @ExposedGet(name = "__dict__")
  public PyObject getDict() {
    return fastGetDict();
  }

  private void ensureDict() {
    if (__dict__ == null) {
      __dict__ = new PyStringMap();
    }
  }

}
